generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

 model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  email     String
  nickname  String     @unique
  password  String
  userGroups UserGroup[]
  messages  Message[]
}

model Schedule {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  startDate DateTime
  endDate   DateTime
  group     Group?    @relation(fields: [groupId], references: [id])
  groupId   Int?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
  timestamp DateTime @default(now())
  userId    Int     
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
}

model Item {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  name            String
  description     String
  consumableType  String
  price           Float
  weight          Int?
  quantity        Float?
  groceryLists    GroceryList[] @relation("ItemGroceryLists")
}

model GroceryList {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  group     Group?     @relation(fields: [groupId], references: [id])
  groupId   Int?
  items     Item[]     @relation("ItemGroceryLists")
}

model Group {
  id           Int           @id @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  userGroups   UserGroup[]
  groceryLists GroceryList[]
  schedules    Schedule[]
  messages     Message[]
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  userId    Int
  groupId   Int
  role      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId]) // Ensures a user can only have one entry per group
}

enum consumableTypeEnum {
  FOOD
  DRINK
  OTHER
}
